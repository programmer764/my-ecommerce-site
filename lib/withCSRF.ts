// lib/withCSRF.ts
import { NextApiRequest, NextApiResponse } from 'next'
import { parse } from 'cookie'
import { getCsrfToken, deleteCsrfToken } from '@/lib/csrfStore'

export function withCSRF(handler: (req: NextApiRequest, res: NextApiResponse) => any) {
  return async (req: NextApiRequest, res: NextApiResponse) => {
    if (['POST', 'PUT', 'DELETE', 'PATCH'].includes(req.method || '')) {
      const cookies = req.headers.cookie ? parse(req.headers.cookie) : {}
      const sessionId = cookies.sessionId
      const csrfToken = cookies.csrfToken

      const expectedToken = sessionId ? getCsrfToken(sessionId) : null
      console.log('üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ CSRF:')
      console.log('üì• –ò–∑ –∑–∞–ø—Ä–æ—Å–∞ (–∫—É–∫–∏):')
      console.log('  sessionId:', sessionId)
      console.log('  csrfToken :', csrfToken)
      console.log('üì¶ –í —Ö—Ä–∞–Ω–∏–ª–∏—â–µ:')
      console.log('  expectedToken:', expectedToken)

      if (!sessionId || !csrfToken || csrfToken !== expectedToken) {
        return res.status(408).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π CSRF —Ç–æ–∫–µ–Ω' })
      }
      

      // –ú–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Ç–æ–∫–µ–Ω –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π)
      deleteCsrfToken(sessionId)
    }

    return handler(req, res)
  }
}
