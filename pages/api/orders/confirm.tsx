import type { NextApiRequest, NextApiResponse } from 'next'
import clientPromise from '@/lib/mongo'

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  try {
    if (req.method !== 'GET') return res.status(405).end()

      const rawToken = req.query.token
      const token = typeof rawToken === 'string'
        ? rawToken
        : Array.isArray(rawToken)
          ? rawToken[0]
          : ''
    if (!token) {
      return res.status(400).json({ message: '–¢–æ–∫–µ–Ω –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω' })
    }

    const client = await clientPromise
    const db = client.db('dbcom')
    const orders = db.collection('orders')

    console.log('üîê –¢–æ–∫–µ–Ω –∏–∑ –∑–∞–ø—Ä–æ—Å–∞:', token)

    const order = await orders.findOne({ confirmationToken: token })

    console.log('üì¶ –ù–∞–π–¥–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑:', order)

    if (!order) {
      return res.status(400).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ç–æ–∫–µ–Ω' })
    }

    if (order.confirmed) {
      return res.status(200).json({ message: '–£–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ' })
    }

    await orders.updateOne(
      { confirmationToken: token },
      { $set: { confirmed: true }, $unset: { confirmationToken: '' } }
    )

    return res.status(200).json({ message: '–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω' })

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', error)
    return res.status(500).json({ message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' })
  }
}
